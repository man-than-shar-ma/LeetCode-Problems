/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    //Recursive Approach
    // void preorderHelper(Node* root, vector<int>& res){
    //     if(root != NULL){
    //         res.push_back(root -> val);
    //         for(Node* i : root -> children){
    //             preorderHelper(i, res);
    //         }
    //     }
    // }

    // vector<int> preorder(Node* root) {
    //     vector<int> res;
    //     preorderHelper(root, res);
    //     return res;
    // }

    //Iterative Approach
    vector<int> preorder(Node* root) {
        vector<int> res;
        stack<Node*> st;
        st.push(root);
        while(!st.empty()){
            Node* temp = st.top();
            st.pop();
            if(temp != NULL){
                res.push_back(temp -> val);
                for (auto it = temp->children.rbegin(); it != temp->children.rend(); ++it){
                    st.push(*it);
                }
            }        
        }
        return res;
    }
};