class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {


        // sort(nums1.begin(),nums1.end());
        // sort(nums2.begin(),nums2.end());
        // vector<int> result;
        // set_intersection(nums1.begin(), nums1.end(), nums2.begin(), nums2.end(), back_inserter(result));
        // return result;

        // ----------------------------------------

        // unordered_map<int,int> map1;
        // for(int i=0; i< nums1.size(); i++){
        //     if(map1.count(nums1[i])){
        //         map1[nums1[i]] += 1;
        //     }
        //     else{
        //         map1[nums1[i]] = 1;
        //     }
        // }
        
        // vector<int> fnarr;
        // for(int i=0; i< nums2.size(); i++){
        //     if(map1.count(nums2[i]) && map1[nums2[i]] > 0){
        //         fnarr.push_back(nums2[i]);
        //         map1[nums2[i]] -= 1;
        //     }
        // }
        // return fnarr;

        // --------------------------------------
        
        unordered_map<int,int> map1;
        for(int i=0; i< nums1.size(); i++){
            map1[nums1[i]] += 1;
        }
        vector<int> fnarr;
        for(int i=0; i< nums2.size(); i++){
            if(map1[nums2[i]] > 0){
                fnarr.push_back(nums2[i]);
                map1[nums2[i]] -= 1;
            }
        }
        return fnarr;

    }
};