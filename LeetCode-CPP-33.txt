class Solution {
public:
    int getPivot(vector<int>& arr){
        int s = 0;
        int e = arr.size()-1;
        int m = s + (e-s)/2;
        while(s<e){
            if(arr[m] > arr[e])
                s = m + 1;
            else
                e = m;
            m = s + (e-s)/2;
        }
        return s;
    }
    
    int binarySearch(vector<int> arr, int start, int end, int target){
        int s = start;
        int e = end;
        int m = s + (e-s)/2;
        while(s<=e){
            if(arr[m] == target)
                return m;
            else if(target > arr[m])
                s = m + 1;
            else if(target < arr[m])
                e = m - 1;
            m = s + (e-s)/2;
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int pivot = getPivot(nums);
        if(target >= nums[pivot] && target <= nums[nums.size()-1])
            return binarySearch(nums, pivot, nums.size()-1, target);
        else if (target >= nums[0])
            return binarySearch(nums, 0, pivot-1, target);
        return -1;
    }
};