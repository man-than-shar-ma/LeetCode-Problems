/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        // TreeNode* leftroot = root->left;
        // TreeNode* rightroot = root->right;
        
        stack<TreeNode*> leftst;
        stack<TreeNode*> rightst;
        leftst.push(root->left);
        rightst.push(root->right);
        while(!leftst.empty() && !rightst.empty()){
            TreeNode* lt;
            TreeNode* rt;
            if(leftst.top() == NULL && rightst.top() == NULL){
                leftst.pop();
                rightst.pop();
                continue;
            }
            if((leftst.top() == NULL && rightst.top() != NULL) || (leftst.top() != NULL && rightst.top() == NULL))
                return false;
            if(leftst.top()->val == rightst.top()->val){
                lt = leftst.top();
                rt = rightst.top();
                leftst.pop();
                rightst.pop();
                leftst.push(lt->right);
                leftst.push(lt->left);
                rightst.push(rt->left);
                rightst.push(rt->right);
            }
            else
                return false;
        }
        if(!leftst.empty() || !rightst.empty())
            return false;
        return true;
    }
};