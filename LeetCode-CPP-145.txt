/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        // method 1
        // vector<int> pre;
        // vector<int> temp;
        // if(root!=NULL){
        //     temp = postorderTraversal(root->left);
        //     pre.insert(pre.end(),temp.begin(),temp.end());
        //     temp = postorderTraversal(root->right);
        //     pre.insert(pre.end(),temp.begin(),temp.end());
        //     pre.push_back(root->val);
        // }
        // return pre;
        
        
        // method 2
        vector<int> v;
        stack<TreeNode*> st;
        TreeNode* temp;
        if(root == NULL) return v;
        else{ 
            st.push(root);
            st.push(root->right);
            root->right = NULL;
            st.push(root->left);
            root->left = NULL;
        }
        while(!st.empty()){
            if(st.top() == NULL)
                st.pop();
            else if(st.top()->left == NULL && st.top()->right == NULL){
                v.push_back(st.top()->val);
                st.pop();
            }
            else{
                temp = st.top();
                    st.pop();
                    st.push(temp);
                    st.push(temp->right);
                    temp->right = NULL;
                    st.push(temp->left);
                    temp->left = NULL;
            }
        }
        return v;
    }
};